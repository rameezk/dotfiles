#!/usr/bin/env bash

cd "$(dirname "$0")/.."
DOTFILES_ROOT=$(pwd -P)

set -e

echo ''

info () {
    # shellcheck disable=SC1117,SC2059
    printf "\r  [ \033[00;34m..\033[0m ] $1\n"
}

user () {
    # shellcheck disable=SC1117,SC2059
    printf "\r  [ \033[0;33m??\033[0m ] $1\n"
}

success () {
    # shellcheck disable=SC1117,SC2059
    printf "\r\033[2K  [ \033[00;32mOK\033[0m ] $1\n"
}

fail () {
    # shellcheck disable=SC1117,SC2059
    printf "\r\033[2K  [\033[0;31mFAIL\033[0m] $1\n"
    echo ''
    exit
}

setup_gitconfig() {
    if ! [ -f git/gitconfig.local.symlink ]
    then
        info 'setting up gitconfig'

        git_credential='cache'
        if [ "$(uname -s)" == "Darwin" ]
        then
            git_credential='osxkeychain'
        fi

        user ' - What is your github author name?'
        read -e git_authorname
        user ' - What is your github author email?'
        read -e git_authoremail

        sed -e "s/AUTHORNAME/$git_authorname/g" -e "s/AUTHOREMAIL/$git_authoremail/g" -e "s/GIT_CREDENTIAL_HELPER/$git_credential/g" git/gitconfig.local.symlink.example > git/gitconfig.local.symlink

        success 'gitconfig'
    fi
}

link_file () {
  local src=$1 dst=$2

  local overwrite= backup= skip=
  local action=

  if [ -f "$dst" -o -d "$dst" -o -L "$dst" ]
  then

    if [ "$overwrite_all" == "false" ] && [ "$backup_all" == "false" ] && [ "$skip_all" == "false" ]
    then

      local currentSrc="$(readlink $dst)"

      if [ "$currentSrc" == "$src" ]
      then

        skip=true;

      else

        user "File already exists: $dst ($(basename "$src")), what do you want to do?\n\
        [s]kip, [S]kip all, [o]verwrite, [O]verwrite all, [b]ackup, [B]ackup all?"
        read -n 1 action

        case "$action" in
          o )
            overwrite=true;;
          O )
            overwrite_all=true;;
          b )
            backup=true;;
          B )
            backup_all=true;;
          s )
            skip=true;;
          S )
            skip_all=true;;
          * )
            ;;
        esac

      fi

    fi

    overwrite=${overwrite:-$overwrite_all}
    backup=${backup:-$backup_all}
    skip=${skip:-$skip_all}

    if [ "$overwrite" == "true" ]
    then
      rm -rf "$dst"
      success "removed $dst"
    fi

    if [ "$backup" == "true" ]
    then
      mv "$dst" "${dst}.backup"
      success "moved $dst to ${dst}.backup"
    fi

    if [ "$skip" == "true" ]
    then
      success "skipped $src"
    fi
  fi

  if [ "$skip" != "true" ]  # "false" or empty
  then
    ln -s "$1" "$2"
    success "linked $1 to $2"
  fi
}

install_dotfiles () {
    info 'linking dotfiles'

    local overwrite_all=false backup_all=false skip_all=false

    for src in $(find -H "$DOTFILES_ROOT" -maxdepth 2 -name '*.symlink' -not -path '*.git*')
    do
        dst="$HOME/.$(basename "${src%.*}")"
        link_file "$src" "$dst"
    done
}

setup_gitconfig
install_dotfiles

# If we're on a Mac, let's install and setup homebrew.
if [ "$(uname -s)" == "Darwin" ]
then
    info "installing dependencies"
    if source bin/dot | while read -r data; do info "$data"; done
    then
        success "dependencies installed"
    else
        fail "error installing dependencies"
    fi
fi

echo ''
echo 'All done!'

# #
# # bootstrap installs things.

# cd "$(dirname "$0")/.."
# DOTFILES_ROOT=$(pwd -P)

# set -e

# echo ''

# info() {
# 	# shellcheck disable=SC2059
# 	printf "\r  [ \033[00;34m..\033[0m ] $1\n"
# }

# user() {
# 	# shellcheck disable=SC2059
# 	printf "\r  [ \033[0;33m??\033[0m ] $1\n"
# }

# success() {
# 	# shellcheck disable=SC2059
# 	printf "\r\033[2K  [ \033[00;32mOK\033[0m ] $1\n"
# }

# fail() {
# 	# shellcheck disable=SC2059
# 	printf "\r\033[2K  [\033[0;31mFAIL\033[0m] $1\n"
# 	echo ''
# 	exit
# }

# setup_gitconfig() {
# 	info 'setup gitconfig'
# 	# if there is no user.email, we'll assume it's a new machine/setup and ask it
# 	if [ -z "$(git config --global --get user.email)" ]; then
# 		user ' - What is your github author name?'
# 		read -r user_name
# 		user ' - What is your github author email?'
# 		read -r user_email

# 		git config --global user.name "$user_name"
# 		git config --global user.email "$user_email"
# 	elif [ "$(git config --global --get dotfiles.managed)" != "true" ]; then
# 		# if user.email exists, let's check for dotfiles.managed config. If it is
# 		# not true, we'll backup the gitconfig file and set previous user.email and
# 		# user.name in the new one
# 		user_name="$(git config --global --get user.name)"
# 		user_email="$(git config --global --get user.email)"
# 		mv ~/.gitconfig ~/.gitconfig.backup
# 		success "moved ~/.gitconfig to ~/.gitconfig.backup"
# 		git config --global user.name "$user_name"
# 		git config --global user.email "$user_email"
# 	else
# 		# otherwise this gitconfig was already made by the dotfiles
# 		info "already managed by dotfiles"
# 	fi
# 	# include the gitconfig.local file
# 	git config --global include.path ~/.gitconfig.local
# 	# finally make git knows this is a managed config already, preventing later
# 	# overrides by this script
# 	git config --global dotfiles.managed true
# 	success 'gitconfig'
# }

# link_file() {
# 	if [ -e "$2" ]; then
# 		if [ "$(readlink "$2")" = "$1" ]; then
# 			success "skipped $1"
# 			return 0
# 		else
# 			mv "$2" "$2.backup"
# 			success "moved $2 to $2.backup"
# 		fi
# 	fi
# 	ln -sf "$1" "$2"
# 	success "linked $1 to $2"
# }

# install_dotfiles() {
# 	info 'installing dotfiles'
# 	find -H "$DOTFILES_ROOT" -maxdepth 3 -name '*.symlink' -not -path '*.git*' |
# 		while read -r src; do
# 			dst="$HOME/.$(basename "${src%.*}")"
# 			link_file "$src" "$dst"
# 		done
# }

# find_zsh() {
# 	if which zsh >/dev/null 2>&1 && grep "$(which zsh)" /etc/shells >/dev/null; then
# 		which zsh
# 	else
# 		echo "/bin/zsh"
# 	fi
# }

# setup_gitconfig
# install_dotfiles

# info "installing dependencies"
# if ./bin/dot_update; then
# 	success "dependencies installed"
# else
# 	fail "error installing dependencies"
# fi

# zsh="$(find_zsh)"
# test -z "$TRAVIS_JOB_ID" &&
# 	test "$(expr "$SHELL" : '.*/\(.*\)')" != "zsh" &&
# 	which chsh >/dev/null 2>&1 &&
# 	chsh -s "$zsh" &&
# 	success "set $("$zsh" --version) at $zsh as default shell"

# echo ''
# echo '  All installed!'
