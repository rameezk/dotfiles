#+TITLE: Rameez's Emacs Config
#+PROPERTY: header-args:emacs-lisp :tangle ~/.config/dotfiles/modules/editors/emacs/config/init.el

* Server
** Start emacs-server on Emacs boot
   Start the emacs server so ~emacsclient~ can connect to it.
  #+begin_src emacs-lisp
    (server-start)
  #+end_src
* Package Management
** straight.el
   I use [[https://github.com/raxod502/straight.el][straight.el]] to manage my packages.

   We bootstrap straight.el with the following.
   #+begin_src emacs-lisp
      (defvar bootstrap-version)
      (let ((bootstrap-file
	     (expand-file-name "straight/repos/straight.el/bootstrap.el" user-emacs-directory))
	    (bootstrap-version 5))
	(unless (file-exists-p bootstrap-file)
	  (with-current-buffer
	      (url-retrieve-synchronously
	       "https://raw.githubusercontent.com/raxod502/straight.el/develop/install.el"
	       'silent 'inhibit-cookies)
	    (goto-char (point-max))
	    (eval-print-last-sexp)))
	(load bootstrap-file nil 'nomessage))
    #+end_src

    I use the =use-package= straight integration to make switching back to =use-package= easier. First we install =use-package= with straight.el.
    #+begin_src emacs-lisp
      (straight-use-package 'use-package)
    #+end_src

    Then enable the straight.el use-package integration.
    #+begin_src emacs-lisp
      (setq straight-use-package-by-default t)
    #+end_src

    Now you can use =use-package= as you normally would.
   
* Interface
** Font
   #+begin_src emacs-lisp
     (set-face-attribute 'default nil :font "JetbrainsMono Nerd Font" :height 160)
   #+end_src
** Theme
*** Doom Themes
   I like Doom Themes because they offer the best integration with various syntaxes.
   #+begin_src emacs-lisp
     (use-package doom-themes
       :config
       ;; Global settings (defaults)
       (setq doom-themes-enable-bold t    ; if nil, bold is universally disabled
	     doom-themes-enable-italic t) ; if nil, italics is universally disabled
       ;;(load-theme 'doom-gruvbox t)

       ;; Enable flashing mode-line on errors
       (doom-themes-visual-bell-config)
       ;; Corrects (and improves) org-mode's native fontification.
       (doom-themes-org-config))
   #+end_src
*** Zenburn
    The GOAT.
    #+begin_src emacs-lisp
      (use-package zenburn-theme
	:config
	(setq zenburn-use-variable-pitch t)
      ;; scale headings in org-mode
      (setq zenburn-scale-org-headlines t)
      ;; scale headings in outline-mode
      (setq zenburn-scale-outline-headlines t)

      ;; enable theme
      (load-theme 'zenburn t))
    #+end_src
** Modeline
*** Doom Modeline
    #+begin_src emacs-lisp
      (use-package doom-modeline
	:config
	(doom-modeline-mode 1))
    #+end_src
    
** Warnings
*** Native-comp
   With native comp enabled there tends to be a lot of annoying warnings. To not go insane I'll turn this off.
  #+begin_src emacs-lisp
    (setq comp-async-report-warnings-errors nil)
  #+end_src
* Keybindings
** Evil
   I grew up on Vim keybindings, so Evil at heart.
   #+begin_src emacs-lisp
     (use-package evil
       :init
       (setq evil-want-integration t)
       (setq evil-want-keybinding nil)
       :config
       (evil-mode t))
   #+end_src
* Applications
** Completions
*** Vertico
    Use a lightweight completion engine such as vertico.
    #+begin_src emacs-lisp
      (use-package vertico
	:init
	(vertico-mode)

	;; Wrap around list
	(setq vertico-cycle t)
	)
    #+end_src
*** Orderless
    Combine vertico with orderless for better completion typing. Typing a =SPC= after a completion narrows down a list some more.
    #+begin_src emacs-lisp
      (use-package orderless
	:init
	(setq completion-styles '(orderless)
	      completion-category-defaults nil
	      completion-category-overrides '((file (styles . (partial-completion))))))
    #+end_src
*** Save History
    This puts your last used command/completion to the top of the list.
    #+begin_src emacs-lisp
      (use-package savehist
	:init
	(savehist-mode))
    #+end_src
*** Consult
    Consult provides some extra completion for built-in emacs functions.
    #+begin_src emacs-lisp
      (use-package consult)
    #+end_src
* Languages
** Org
*** Babel
**** Tangling
***** Languages to tangle
     In order to tangle certain languages we code blocks we need to define the following:
     #+begin_src emacs-lisp
       (org-babel-do-load-languages
	'org-babel-load-languages
	'((emacs-lisp . t)))
     #+end_src

***** Auto-tangling
      To enable auto-tangling on save we define a custom function.
      #+begin_src emacs-lisp
        (defun rkn/org-babel-tangle-dont-ask ()
	 (when (string-equal (buffer-file-name) (expand-file-name "~/.config/dotfiles/modules/editors/emacs/config/emacs.org"))
	   (let ((org-confirm-babel-evaluate nil))
	     (org-babel-tangle))))
      #+end_src

      We then invoke this function as an =org-mode-hook=.
      #+begin_src emacs-lisp
        (add-hook 'org-mode-hook (lambda () (add-hook 'after-save-hook #'rkn/org-babel-tangle-dont-ask
						     'run-at-end 'only-in-org-mode)))
      #+end_src

