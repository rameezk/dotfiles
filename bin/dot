#! /usr/bin/env nix-shell
#! nix-shell --pure -i python -p "python310.withPackages (ps: [ps.typer])" nix git git-crypt curl cacert fzf

import os
import typer
import typing


app = typer.Typer()
dotfiles_dir = "~/.config/dotfiles"


def info(msg: str):
    typer.secho(msg, fg=typer.colors.MAGENTA)


def success(msg: str):
    typer.secho(msg, fg=typer.colors.BRIGHT_GREEN)


def error(msg: str):
    typer.secho(msg, fg=typer.colors.BRIGHT_RED)


def run_command(command: str):
    info(f"> {command}")
    return os.system(command)


def get_machine_name() -> typing.Optional[str]:
    try:
        with open(os.path.expanduser(f"{dotfiles_dir}/.machine"), "r") as f:
            machine = f.read()
            return machine
    except:
        ...


@app.command(help="Open dotfiles in $EDITOR")
def edit(vim: bool = False):
    if vim:
        editor = "vim"
    else:
        editor = "emacsclient --no-wait"

    run_command(
        f"{editor} $(find {dotfiles_dir} -type f -not -path '*/.git/*' -not -path '*~' -not -path '*/.direnv/*' | fzf)"
    )


@app.command(help="Rebuild configuration and activate it")
def rebuild(with_traces: bool = False):
    info("üî® Rebuilding environment")

    machine = get_machine_name()

    if machine is None:
        error(f"‚ùå No machine specified in {dotfiles_dir}/.machine")
        raise typer.Exit(code=1)

    flake_path = f"{machine}"

    if with_traces:
        info("Tracing on")
        cmd = f"cd {dotfiles_dir} && nix build --extra-experimental-features 'nix-command flakes' --show-trace .#{flake_path}"
    else:
        cmd = f"cd {dotfiles_dir} && nix build --extra-experimental-features 'nix-command flakes' .#{flake_path}"

    exit_code = run_command(cmd)
    if exit_code == 0:
        info("‚úîÔ∏è Activating environment")
        run_command(f"cd {dotfiles_dir} && ./result/activate")
        success("‚ú® Done")
    else:
        error("‚ùå Something went wrong")


@app.command(help="Choose a generation to rollback to")
def rollback(help="Rollback configuration"):
    info("Listing generations")
    generation = run_command(
        "$(home-manager generations | fzf | awk '{ print $7 }')/activate"
    )
    success("‚ú® Done")


if __name__ == "__main__":
    app()
