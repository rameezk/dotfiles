#+title: Emacs Config
#+PROPERTY: header-args:emacs-lisp :tangle ./init.el :mkdirp yes

* Table of Contents
  :PROPERTIES:
  :TOC: :include all :ignore this
  :END:
:CONTENTS:
- [[#performance][Performance]]
  - [[#startup][Startup]]
- [[#networking][Networking]]
  - [[#proxy][Proxy]]
- [[#package-management][Package Management]]
- [[#appearance][Appearance]]
  - [[#interface][Interface]]
    - [[#startup-messagesplash-screen][Startup Message/Splash Screen]]
    - [[#menu-bar][Menu Bar]]
    - [[#tool-bar][Tool Bar]]
    - [[#scrollbars][Scrollbars]]
  - [[#font][Font]]
  - [[#theme][Theme]]
    - [[#custom-themes][Custom Themes]]
    - [[#current-theme][Current Theme]]
  - [[#modeline][Modeline]]
    - [[#doom-modeline][Doom Modeline]]
  - [[#icons][Icons]]
    - [[#all-the-icons][All the icons]]
  - [[#keybinding-panel][Keybinding Panel]]
    - [[#which-key][which-key]]
- [[#keybindings][Keybindings]]
  - [[#evil][Evil]]
  - [[#evil-collection][Evil Collection]]
  - [[#leader-bindings][Leader Bindings]]
    - [[#leader-key-definition][Leader key definition]]
    - [[#leader-keys][Leader Keys]]
      - [[#files][Files]]
      - [[#searching][Searching]]
      - [[#buffers][Buffers]]
- [[#applications-and-tooling][Applications and tooling]]
  - [[#development][Development]]
    - [[#git][Git]]
      - [[#magit][Magit]]
  - [[#completion][Completion]]
    - [[#ivy][Ivy]]
    - [[#counsel][Counsel]]
    - [[#projectile][Projectile]]
  - [[#notes][Notes]]
    - [[#org-roam][Org-Roam]]
- [[#editing][Editing]]
  - [[#commenting][Commenting]]
- [[#languages][Languages]]
  - [[#org][Org]]
    - [[#babel][Babel]]
      - [[#languages-to-tangle][Languages to tangle]]
      - [[#auto-tangle-configuration-files][Auto-tangle Configuration Files]]
    - [[#block-templates][Block Templates]]
    - [[#update-toc-on-save][Update TOC on save]]
:END:
* Performance
** Startup
#+begin_src emacs-lisp
;; The default is 800 kilobytes.  Measured in bytes.
(setq gc-cons-threshold (* 50 1000 1000))

;; Profile emacs startup
(add-hook 'emacs-startup-hook
          (lambda ()
            (message "*** Emacs loaded in %s with %d garbage collections."
                     (format "%.2f seconds"
                             (float-time
                              (time-subtract after-init-time before-init-time)))
                     gcs-done)))
#+end_src

* Networking
** Proxy
Check if the ~~/.proxyrc~ exists. If it does, we assume we need to have a proxy set.

Ideally, we should source this file, but for now, we just assume something like CNTLM
is running on "127.0.0.1:3128".

#+begin_src emacs-lisp
(if (file-exists-p "~/.proxyrc")
(setq url-proxy-services
         '(("no_proxy" . "^\\(localhost\\|10.*\\)")
                ("http" . "127.0.0.1:3128")
                     ("https" . "127.0.0.1:3128"))) nil)
#+end_src

* Package Management
#+begin_src emacs-lisp
;; Initialize package sources
(require 'package)

(setq package-archives '(("melpa" . "https://melpa.org/packages/")
                         ("melpa-stable" . "https://stable.melpa.org/packages/")
                         ("org" . "https://orgmode.org/elpa/")
                         ("elpa" . "https://elpa.gnu.org/packages/")))

;;(package-initialize)
;; (unless package-archive-contents
;;   (package-refresh-contents))

;; Initialize use-package on non-Linux platforms
(unless (package-installed-p 'use-package) 
   (package-install 'use-package))
(require 'use-package)

;; Uncomment this to get a reading on packages that get loaded at startup
(setq use-package-verbose t)

;; On non-Guix systems, "ensure" packages by default
(setq use-package-always-ensure t)
#+end_src

* Appearance
** Interface
*** Startup Message/Splash Screen
Me no likey, so will disable
#+begin_src emacs-lisp
(setq inhibit-startup-message t)
#+end_src

*** Menu Bar
Takes up unneccessary space, will disable.
#+begin_src emacs-lisp
(menu-bar-mode -1)
#+end_src

*** Tool Bar 
Disable fugly tool bar.
#+begin_src emacs-lisp
(tool-bar-mode -1)
#+end_src

*** Scrollbars
Make scrollbars invisible.
#+begin_src emacs-lisp
(scroll-bar-mode -1)
#+end_src
** Font
#+begin_src emacs-lisp
(set-face-attribute 'default nil :font "JetbrainsMono Nerd Font" :height 160)
#+end_src

** Theme
*** Custom Themes
#+begin_src emacs-lisp
(use-package color-theme-sanityinc-tomorrow)
#+end_src

*** Current Theme
#+begin_src emacs-lisp
(if (package-installed-p 'color-theme-sanityinc-tomorrow)
    (load-theme 'sanityinc-tomorrow-eighties t)
    (load-theme 'wombat t))
#+end_src

** Modeline
*** Doom Modeline
A fancy modeline.
#+begin_src emacs-lisp
(use-package doom-modeline
  :ensure t
  :init (doom-modeline-mode 1))
#+end_src
** Icons
*** All the icons
Get some icons!
#+begin_src emacs-lisp
(use-package all-the-icons)
#+end_src

Enable some transformations for Ivy, Counsel and Projectile using all-the-icons-ivy-rich.
#+begin_src emacs-lisp
(use-package all-the-icons-ivy-rich
  :after (ivy counsel counsel-projectile)
  :init (all-the-icons-ivy-rich-mode 1))
#+end_src

** Keybinding Panel
*** which-key
    #+begin_src emacs-lisp
    (use-package which-key
      :init
      (which-key-mode 1)
      :diminish which-key-mode
      :config
      (setq which-key-idle-delay 0.1))
    #+end_src
* Keybindings
** Evil
#+begin_src emacs-lisp
(use-package evil
   :init
   (setq evil-want-integration t)
   (setq evil-want-keybinding nil)
   :config
   (evil-mode 1))
#+end_src
** Evil Collection
A set of keybindings that [[Evil]] doesn't cover by default.
#+begin_src emacs-lisp
(use-package evil-collection
  :after evil
  :custom
  (evil-collection-outline-bind-tab-p nil)
  :config
  (evil-collection-init))
#+end_src
** Leader Bindings
*** Leader key definition 
   #+begin_src emacs-lisp
   (use-package general
   :config
   (general-evil-setup t)

   (general-create-definer rkn/leader-key-def 
      :keymaps '(normal insert visual emacs)
      :prefix "SPC"
      :global-prefix "C-SPC"))
   #+end_src
*** Leader Keys
Some general leader keybindings for convenience.

**** Files
For handling files.
#+begin_src emacs-lisp
(rkn/leader-key-def
"f" '(:ignore t :which-key "file")
"ff" 'counsel-find-file
"fc" (lambda() (interactive)(counsel-find-file "~/.emacs.d/emacs-config.org"))
"f/" 'swiper)
#+end_src

**** Searching
Searching/grepping files and directories.
#+begin_src emacs-lisp
(rkn/leader-key-def 
"s" '(:ignore t which-key "swiper")
"ss" 'swiper
"sp" 'counsel-rg)
#+end_src

**** Buffers
Manage buffers.
#+begin_src emacs-lisp
(rkn/leader-key-def 
"b" '(:ignore t :which-key "buffer")
"bb" 'counsel-switch-buffer)
#+end_src

* Applications and tooling
** Development
*** Git
**** Magit
The best Git client. Ever.
#+begin_src emacs-lisp
(use-package magit)

(rkn/leader-key-def 
  "g" '(:ignore t :which-key "git")
  "gg" 'magit-status)
#+end_src
** Completion
*** Ivy
A generic completion framework for Emacs.
#+begin_src emacs-lisp
(use-package ivy
  :diminish
  :init
  (ivy-mode 1))
#+end_src

*** Counsel
Complete stuff nicely together with [[Ivy]].
#+begin_src emacs-lisp
(use-package counsel
  :bind (("M-x" . counsel-M-x)
         ("C-x C-f" . counsel-find-file)))
#+end_src

*** Projectile
Switch easily between projects.
#+begin_src emacs-lisp
(use-package projectile
  :diminish projectile-mode
  :config
  (projectile-mode))

(use-package counsel-projectile)

(rkn/leader-key-def 
"p" '(:ignore t :which-key "project")
"pf" 'counsel-projectile-find-file
"ps" 'counsel-projectile-rg
"pp" 'counsel-projectile-switch-project)
#+end_src

3. ivy-rich
#+begin_src emacs-lisp
(use-package ivy-rich
  :after (all-the-icons-ivy-rich)
  :init (ivy-rich-mode 1))
#+end_src
** Notes
*** Org-Roam 
Org-Roam is the future of smart notes!
#+begin_src emacs-lisp
(use-package org-roam
  :hook 
  (after-init . org-roam-mode)
  :custom
  (org-roam-directory "~/Dropbox/DigitalGarden")
  :config
  (setq org-roam-graph-exclude-matcher '("private" "dailies" "Inbox" "todoist")))

(rkn/leader-key-def
"n" '(:ignore t :which-key "note")
"nr" '(:ignore t :which-key "roam")
"nrf" 'org-roam-find-file)
#+end_src

* Editing
** Commenting
Use evil-nerd-commenter for better commenting.
#+begin_src emacs-lisp
(use-package evil-nerd-commenter
  :bind ("M-/" . evilnc-comment-or-uncomment-lines))
#+end_src
* Languages
** Org
*** Babel
**** Languages to tangle
In order to execute code in ~org-mode~ blocks, we need to define the following:
#+begin_src emacs-lisp
(org-babel-do-load-languages
  'org-babel-load-languages
  '((emacs-lisp . t)))

(push '("conf-unix" . conf-unix) org-src-lang-modes)
#+end_src

**** Auto-tangle Configuration Files
We define a function that gets executed every time this file is saved.
#+begin_src emacs-lisp
;; Since we don't want to disable org-confirm-babel-evaluate all
;; of the time, do it around the after-save-hook
(defun rkn/org-babel-tangle-dont-ask ()
  ;; Dynamic scoping to the rescue
  (let ((org-confirm-babel-evaluate nil))
    (org-babel-tangle)))

(add-hook 'org-mode-hook (lambda () (add-hook 'after-save-hook #'rkn/org-babel-tangle-dont-ask
                                              'run-at-end 'only-in-org-mode)))

#+end_src

*** Block Templates
Allows me to write something like =<el= and hit tab to complete.
#+begin_src emacs-lisp
;; This is needed as of Org 9.2
(require 'org-tempo)

(add-to-list 'org-structure-template-alist '("sh" . "src sh"))
(add-to-list 'org-structure-template-alist '("el" . "src emacs-lisp"))
(add-to-list 'org-structure-template-alist '("sc" . "src scheme"))
(add-to-list 'org-structure-template-alist '("ts" . "src typescript"))
(add-to-list 'org-structure-template-alist '("py" . "src python"))
(add-to-list 'org-structure-template-alist '("yaml" . "src yaml"))
(add-to-list 'org-structure-template-alist '("json" . "src json"))
#+end_src

*** Update TOC on save
It's super nice to have a TOC for long org files (like this one) so it's great to not have to worry about updating it. 
#+begin_src emacs-lisp
(use-package org-make-toc
  :hook (org-mode . org-make-toc-mode))
#+end_src



