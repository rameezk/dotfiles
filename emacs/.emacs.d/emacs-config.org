#+title: Emacs Config
#+PROPERTY: header-args:emacs-lisp :tangle ./init.el :mkdirp yes

* Font
#+begin_src emacs-lisp
(set-face-attribute 'default nil :font "JetbrainsMono Nerd Font" :height 160)
#+end_src

* Theme
#+begin_src emacs-lisp
(if (package-installed-p 'color-theme-sanityinc-tomorrow)
    (load-theme 'sanityinc-tomorrow-eighties t)
    (load-theme 'wombat t))
#+end_src
* Networking
** Proxy
Check if the ~~/.proxyrc~ exists. If it does, we assume we need to have a proxy set.

Ideally, we should source this file, but for now, we just assume something like CNTLM
is running on "127.0.0.1:3128".

#+begin_src emacs-lisp
(if (file-exists-p "~/.proxyrc")
(setq url-proxy-services
         '(("no_proxy" . "^\\(localhost\\|10.*\\)")
                ("http" . "127.0.0.1:3128")
                     ("https" . "127.0.0.1:3128"))) nil)
#+end_src

* Package Management
** Repositories
#+begin_src emacs-lisp
(setq package-archives '(("melpa" . "https://melpa.org/packages/")
                         ("org" . "https://orgmode.org/elpa/")
                         ("elpa" . "https://elpa.gnu.org/packages/")))
(package-initialize)
(unless package-archive-contents
(package-refresh-contents))

#+end_src

** 
* Org Mode
** Babel
*** Languages
In order to execute code in ~org-mode~ blocks, we need to define the following:
#+begin_src emacs-lisp
(org-babel-do-load-languages
  'org-babel-load-languages
  '((emacs-lisp . t)))

(push '("conf-unix" . conf-unix) org-src-lang-modes)
#+end_src

*** Auto-tangle Configuration Files
We define a function that gets executed every time this file is saved.
#+begin_src emacs-lisp
;; Automatically tangle our config file when we save it
(defun rkn/org-babel-tangle-config ()
  (when (string-equal (file-name-directory (buffer-file-name))
                      (expand-file-name user-emacs-directory))
    ;; Dynamic scoping to the rescue
    (let ((org-confirm-babel-evaluate nil))
      (org-babel-tangle))))

(add-hook 'org-mode-hook (lambda () (add-hook 'after-save-hook #'rkn/org-babel-tangle-config)))
#+end_src
